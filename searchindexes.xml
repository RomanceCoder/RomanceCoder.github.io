<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>世界，你好！</title><url>/post/hello-world.html</url><categories><category>开始建站</category></categories><tags><tag>Hugo</tag><tag>开始</tag></tags><content type="html"> “使用 weight 关键字置顶文章。”
Hugo
是现今世界上最快的网站建设框架，也是最流行的开源静态站点生成器之一。 凭借其惊人的速度和灵活性，Hugo 让建设网站再次变得有趣起来。
快速开始
发表新文章
$ hugo new hello-world.md 更多信息：
内容格式
启动服务
$ hugo server 更多信息：
Hugo 服务命令行
生成静态文件
$ hugo 更多信息：
Hugo 建站
部署到服务器
$ hugo deploy 更多信息：
Hugo 发布
祝你好运，相信你会喜欢上 Hugo 建站的旅程！</content></entry><entry><title>2160_rtt</title><url>/posts/2160_rtt/</url><categories><category>c++</category></categories><tags><tag>work</tag><tag>c++</tag></tags><content type="html"> rttcore的移植
问题记录
我在编2160大包的时候
build_docker_image -i 6 报错
Could not allocate block in ext2 filesystem Error copying file /work/build/ubuntu/rootfs_template/usr/bin/rttcore to /work/images/tmp/5g-ubuntu-core.ext4:usr/bin 问题思考
这个问题google了一下
据我所知，这种情况通常发生在您向构建中添加了无法容纳分配给某个分区（通常是system.img或vendor.img）的大小的内容时。如果您添加了任何内容，请尝试将其删除，然后查看构建是否完成。 还有同事觉得是文件格式不对 我依然觉得是大小问题
解决
将生成的bin和so的符号表全部去掉，一下子就小了很多
注意在使用strip的时候，需要使用交叉编译工具中的strip</content></entry><entry><title>Std_string</title><url>/posts/std_string/</url><categories><category>c++</category></categories><tags><tag>stl</tag></tags><content type="html"><![CDATA[  std::string 与 char[] 的相互转化#include &lt;iostream&gt; #include &lt;cstring&gt; int main() { // std::string -&gt; char[] std::string cpp; char c[10] = &#34;hello, c&#34;; cpp = c; std::cout &lt;&lt; cpp &lt;&lt; std::endl; // hello, c // char[] -&gt; std::string char c1[10] = {0}; std::string cpp1 = &#34;hello, cpp&#34;; strcpy(c1,cpp1.c_str()); std::cout &lt;&lt; c1 &lt;&lt; std::endl; // hello, cpp return 0; } std::string 与 char[] 的清空std::string清空#include &lt;iostream&gt; #include &lt;cstring&gt; int main() { // std::string 清空 std::string cpp(&#34;hello, cpp&#34;); std::cout &lt;&lt; cpp &lt;&lt; std::endl; // hello, cpp // string.clear() cpp.clear(); std::cout &lt;&lt; cpp &lt;&lt; std::endl; // // string = &#34;&#34; cpp = &#34;&#34;; std::cout &lt;&lt; cpp &lt;&lt; std::endl; // return 0; } char[] 的清空#include &lt;iostream&gt; #include &lt;cstring&gt; int main() { char c[] = &#34;char&#34;; std::cout &lt;&lt; c &lt;&lt; std::endl;// char memset(c, 0, sizeof(c)); std::cout &lt;&lt; c &lt;&lt; std::endl;// return 0; }   ]]></content></entry><entry><title>Git</title><url>/posts/git/</url><categories><category>git</category></categories><tags><tag>git</tag></tags><content type="html"> 以渺小启程-Git
关于Git的神话 我就不再多说
Git的参考资料
&amp;ndash; 永远的圣经
learning git
麦兜搞it[up主]
Git重点记录
一个远程仓库
一个本地仓库
Git指令记录
git branch # 列出本地仓库的分支 git branch -r # 列出本地仓库的远程分支 git brach -a # 列出本地仓库的分支和远程分支 git push # 将本地仓库的当前分支推送到远程仓库的分支上 注意! 如果当前分支 没有先于 远程分支，会被拒绝 -f git fetch # 将远程仓库上 本地没有的 分支(包括tag) 以及 它们对应commit 都下载下来。换言仓库上没有的，本地有的，就不会动了</content></entry><entry><title>Deep Copy</title><url>/posts/deep-copy/</url><categories><category>C++</category></categories><tags><tag>C++</tag><tag>deep copy</tag></tags><content type="html"><![CDATA[  开发中的困惑最近在写这样的代码的时候 产生了一个疑问？
如下代码会发生浅拷贝吗？
struct Buffer { UINT32 verify; UINT8 src; UINT8 dest; UINT8 type; UINT32 length; UINT32 num; char data[MAX_DATA_SIZE]; }; class Msg { private: Buffer buf; public: Msg(); void init(const char *data, INT32 data_len); void info() const; }; int main() { Msg msg1; Msg msg2 = msg1;// ? } 写段代码瞧瞧#include &lt;stdio.h&gt; #include &lt;string.h&gt; struct Con{ char data[100]; int * p; }; class Stu{ public: Con c; Stu() { memset(&amp;c, 0, sizeof(c)); c.p = NULL; } }; int main() { Stu s1; strcpy(s1.c.data, &#34;hello&#34;); int a = 3; s1.c.p = &amp;a; printf(&#34;s1.c.data:%p\n&#34;, s1.c.data); printf(&#34;s1.c.p:%p\n&#34;, s1.c.p); Stu s2=s1; printf(&#34;s2.c.data:%p\n&#34;, s2.c.data); printf(&#34;s2.c.p:%p\n&#34;, s2.c.p); } // s1.c.data:0000008f421ff830 // s1.c.p:0000008f421ff82c // s2.c.data:0000008f421ff7b0 // s2.c.p:0000008f421ff82c 解决对象在拷贝构造或者拷贝赋值的时候，是一个字节一个字节拷过去的。
不论是类中的数组 还是 类中的结构体中的数组 不管嵌套多少层
结果都是一样的
指针类型会发生浅拷贝 数组就不会
  ]]></content></entry><entry><title>Git Bash</title><url>/posts/git-bash/</url><categories><category>git</category></categories><tags><tag>git</tag></tags><content type="html"><![CDATA[  git-bash
git-bash在公司服务器上使用zsh oh my zsh总是感觉有点不太稳
罢了 在bash 配置一下git吧
在.bash_aliases中添加如下配置(之前在github上看到https://gist.github.com/vratiu/9780109的 感觉不错 用于参考)
if [ -f ~/git-completion.bash ] &amp;&amp; [ -f ~/git-prompt.sh ];then . ~/git-completion.bash export GIT_PS1_SHOWDIRTYSTATE=1 export PS1=&#39;\[\033[1;92m\]➜ \[\033[1;34m\]\w \[\033[0;35m\]git:(\[\033[0;31m\]$(__git_ps1 &#34;%s&#34;)\[\033[0;35m\]) \[\033[0m\]&#39; fi   ]]></content></entry><entry><title>Master Talk</title><url>/posts/master-talk/</url><categories><category>侯婕</category></categories><tags><tag>侯婕</tag></tags><content type="html"> 侯捷先生讲座, 与大家共勉.
● 「程序人生」演讲内容摘要。
如果你不曾听过侯捷的名字，不曾知道侯捷做的事情，你不可能有兴趣走入会场。因此，各位远道而来，我窃以为，无非想看看侯捷本人，听听他说话。如果 你期盼在这种场合听到某某技术的剖析，某某趋势的发展，肯定你会失望。我不是趋势专家，对此也毫无兴趣。台上说话和台下聊天不同，我不能也不敢讲我没有心 得没有研究的话题。「程序人生」这个话题旨在让大家对一个你感兴趣的人（侯捷我）的学习历程有些了解，或许从中给你一些灵感或激励。
我在一个被昵称为「少林寺」的地方，磨练三年。後半期因为发现了自己浓烈的兴趣与不错的天赋，决定转向技术写作与教育这条路。30岁之後的我，行事 常思「贡献度」，我知道自己在技术写作与教育这条路上能够走得比程式开发更好，所以决定把自己摆在最适当的位置。一口食物，放在嘴里是佳肴，吐出来就成了 秽物。天生我材必有用，每个人都应该仔细思考，自己真正的兴趣和才能在哪里。很多人都问，30岁之後做不动程序员了怎麽办。30年正是英年，体力和智力和 成熟度都正达到巅峰，怎麽会做不动程序？想往管理阶层走当然很好，那就努力充实自己，并且扪心自问，你做管理快乐吗？要知道，人事绝对比机器让你更焦头烂 额。如果你决定争取一个粥少僧多的职位，就不要再问「怎麽办」。还能怎麽办呢？就努力以赴呀！比赛还没开始就问「输了怎麽办」，这不像话，你注定要输。
技术养成阶段，对我影响最大的一件事是，我自动请缨做一套公用程式库，目标给全部门乃至全所使用。这使我学习到技术的整理、文件 （documents）的撰写、人际的沟通。重要的不在具体实作，而在多方培养了正确观念。如果你问我，对於程式，我最重视什麽？我最重视可读性（含说明 文件）、维护性、复用性，完整性。这些其实是一体多面。
转向技术写作後，我的生活和待在业界没有什麽改变，只不过业界的产出是软体，我的产出是书籍和文章。写一本书和规划一个专案（project）没什麽两样。但是，专心於技术写作之後，从此我有绝对的自由钻研我最感兴趣的「技术本质」与「技术核心」。
我周遭的朋友，但凡表现不凡者，都有非凡的资料整理功夫。如今网络发达，资讯爆炸，硬碟又便宜，资料整理功夫更显重要。没有经过自己整理的资料，形 同垃圾。许多人喜欢上网「收集」一大堆电子书、电子文档。你得想个办法把这些庞大的资料化为你的图书馆，而不是 …</content></entry><entry><title>argc</title><url>/posts/argc/</url><categories><category>C</category></categories><tags><tag>C</tag></tags><content type="html"><![CDATA[  C中的argc和argv#include &lt;iostream&gt; #include &lt;cstdio&gt; #include &lt;basetsd.h&gt; int main(int argc, char * argv[]) { std::cout &lt;&lt; &#34;Hello, World!&#34; &lt;&lt; std::endl; for (int i = 0; i &lt; argc; ++i) { printf(&#34;%d:%s\n&#34;, i, argv[i]); } printf(&#34;parse hex:\n&#34;); UINT32 hex; sscanf(argv[1], &#34;0x%x&#34;, &amp;hex); printf(&#34;0x%x\n&#34;, hex); printf(&#34;parse double:\n&#34;); double f0; sscanf(argv[2], &#34;%lf&#34;, &amp;f0); printf(&#34;%lf\n&#34;, f0); return 0; }   ]]></content></entry><entry><title>git_tag</title><url>/posts/git_tag/</url><categories><category>Git</category></categories><tags><tag>git</tag></tags><content type="html"><![CDATA[  本地仓库打tag本地仓库打标签可以用附注标签或者轻量标签 然后更新远端
附注标签git tag -a V3.0.1 -m &#34;V3.0.3&#34; # git tag -a &lt;tag-name&gt; -m &#34;...&#34; 轻量标签git tag V3.0.1 # git tag &lt;tag-name&gt; 更新远端方式一git push origin V3.0.1 # git push &lt;remote&gt; &lt;tag-name&gt; 更新远端方式二git push origin --tags # git push &lt;remote&gt; --tags 本地仓库删tag删除本地标签 然后更新远端
git tag -d V3.0.1 # git tag -d &lt;tag-name&gt; 更新远端方式一git push origin :refs/tags/V3.0.1 # git push &lt;remote&gt; :refs/tags/&lt;tag-name&gt; 更新远端方式二git push origin --delete V3.0.1 # git push &lt;remote&gt; --delete &lt;tag-name&gt; tag冲突拉取远端tag本地有远端同名的tag 需要先delete本地的tag 再拉取远端的tag
git tag -d V5.2.7 # git tag -d &lt;tag-name&gt; git fetch origin # git fetch &lt;remote&gt; 推送本地tag远端有本地同名的tag 需要先delete远端的tag 再拉推送本地tag
git push origin --delte V5.2.7 # git push &lt;remote&gt; --delete &lt;tag-name&gt; git push origin --tags # git push &lt;remote&gt; --tags   ]]></content></entry><entry><title>printf</title><url>/posts/printf/</url><categories><category>C</category></categories><tags><tag>C</tag></tags><content type="html"><![CDATA[  C语言中的printf我们常常使用C中标准库自带的printf打印内容
例如：
#include &lt;stdio.h&gt; int main(){ printf(&#34;hello,world\n&#34;); return 0; } C语言中的printf打印十六进制#include &lt;stdio.h&gt; int main(){ printf(&#34;0x%x | 0x%X \n&#34;, 0x1a, 0x1a); //==&gt; 0x1a | 0x1A printf(&#34;0x%04x | 0x%04X \n&#34;, 0x1a, 0x1a); //==&gt; 0x001a | 0x001A return 0; }   ]]></content></entry></search>